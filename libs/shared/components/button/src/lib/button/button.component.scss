@use 'sass:color';
@use "sass:map";

// Define variables for colors, spacing, and typography
$colors: (
  "primary": #526ed3,
  "accent": #be1027,
  "secondary-background": #252525,
  "disabled": #c0c0c0,
  "gray": gray,
);

$font-size-base: 16px;
$font-size-small: 13px;

$font-weight-bold: 700;
$border-radius: 8px;
$padding-horizontal: 20px;
$gap-size: 10px;

$transition-duration: 0.3s;
$transition-timing: ease-in-out;

$button-sizes: (
  xs: 25px,
  s: 35px,
  m: 40px,
  l: 45px,
);

// Mixin for button sizes
@mixin button-size($size) {
  height: map.get($button-sizes, $size);

  .button-label {
    font-size: if($size ==xs or $size ==s, $font-size-small, $font-size-base);
  }

  font-size: if($size ==xs or $size ==s, $font-size-small, $font-size-base);

  &[data-shape="circle"] {
    width: map.get($button-sizes, $size);
    border-radius: 50%;
  }
}

// Mixin for rounded shape
@mixin rounded-shape {
  &[data-shape="rounded"] {
    border-radius: $border-radius;
  }
}

// Mixin for transitions
@mixin transitions {
  transition-property: background-color, color, opacity;
  transition-duration: $transition-duration;
  transition-timing-function: $transition-timing;
}

// Mixin for button appearance
@mixin button-appearance($color-key) {
  background-color: map.get($colors, $color-key);

  &:hover {
    background-color: lighten(map.get($colors, $color-key), 10%);
  }

  @include rounded-shape;
}

.cmp-button {
  border: 0;
  appearance: none;
  text-decoration: none;
  position: relative;
  display: inline-flex;
  align-items: center;
  box-sizing: border-box;
  white-space: nowrap;
  overflow: hidden;
  vertical-align: middle;
  max-width: 100%;
  justify-content: center;
  user-select: none;
  font-weight: $font-weight-bold;
  cursor: pointer;
  gap: $gap-size;
  padding: 0 $padding-horizontal;

  @include transitions;

  .button-label {
    font-size: $font-size-base;
  }

  // Button size variants
  @each $size, $height in $button-sizes {
    &--#{$size} {
      @include button-size($size);
    }
  }

  // Appearance types
  &[data-appearance-type="primary"] {
    @include button-appearance(primary);
  }

  &[data-appearance-type="accent"] {
    @include button-appearance("accent");
  }

  &[data-appearance-type="secondary"] {
    color: map.get($colors, "primary");
    @include button-appearance(secondary-background);
  }

  &[data-appearance-type="destructive"] {
    color: map.get($colors, "accent");
    @include button-appearance(secondary-background);
  }

  &[data-appearance-type="flat"] {
    color: map.get($colors, "primary");
    background-color: transparent;

    &:hover {
      background-color: lighten(map.get($colors, "secondary-background"), 10%);
    }

    @include rounded-shape;
  }

  &[data-appearance-type="outline"] {
    color: map.get($colors, "primary");
    background-color: transparent;
    box-shadow: inset 0 0 0 1px lighten(map.get($colors, "secondary-background"), 10%);

    &:hover {
      background-color: lighten(map.get($colors, "secondary-background"), 10%);
    }

    @include rounded-shape;
  }

  &:disabled:not(.loading) {
    background-color: map.get($colors, "gray");
    cursor: not-allowed;

    &:hover {
      background-color: rgb(172, 168, 168);
    }
  }

  &:disabled.loading {
    cursor: wait;
  }
}

.loader {
  position: absolute;
  color: transparent;
}

.loading .loader {
  color: initial;
}

.loading:not(.loader) {
  color: transparent;
}